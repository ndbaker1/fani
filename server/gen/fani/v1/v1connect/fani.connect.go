// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fani/v1/fani.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fani/gen/fani/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FaniServiceName is the fully-qualified name of the FaniService service.
	FaniServiceName = "fani.v1.FaniService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FaniServiceListAlbumsProcedure is the fully-qualified name of the FaniService's ListAlbums RPC.
	FaniServiceListAlbumsProcedure = "/fani.v1.FaniService/ListAlbums"
	// FaniServiceListStagingProcedure is the fully-qualified name of the FaniService's ListStaging RPC.
	FaniServiceListStagingProcedure = "/fani.v1.FaniService/ListStaging"
	// FaniServiceMoveFilesProcedure is the fully-qualified name of the FaniService's MoveFiles RPC.
	FaniServiceMoveFilesProcedure = "/fani.v1.FaniService/MoveFiles"
	// FaniServiceGetMediaProcedure is the fully-qualified name of the FaniService's GetMedia RPC.
	FaniServiceGetMediaProcedure = "/fani.v1.FaniService/GetMedia"
)

// FaniServiceClient is a client for the fani.v1.FaniService service.
type FaniServiceClient interface {
	ListAlbums(context.Context, *connect.Request[v1.ListAlbumsRequest]) (*connect.Response[v1.ListAlbumsResponse], error)
	ListStaging(context.Context, *connect.Request[v1.ListStagingRequest]) (*connect.Response[v1.ListStagingResponse], error)
	MoveFiles(context.Context, *connect.Request[v1.MoveFilesRequest]) (*connect.Response[v1.MoveFilesResponse], error)
	GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error)
}

// NewFaniServiceClient constructs a client for the fani.v1.FaniService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFaniServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FaniServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	faniServiceMethods := v1.File_fani_v1_fani_proto.Services().ByName("FaniService").Methods()
	return &faniServiceClient{
		listAlbums: connect.NewClient[v1.ListAlbumsRequest, v1.ListAlbumsResponse](
			httpClient,
			baseURL+FaniServiceListAlbumsProcedure,
			connect.WithSchema(faniServiceMethods.ByName("ListAlbums")),
			connect.WithClientOptions(opts...),
		),
		listStaging: connect.NewClient[v1.ListStagingRequest, v1.ListStagingResponse](
			httpClient,
			baseURL+FaniServiceListStagingProcedure,
			connect.WithSchema(faniServiceMethods.ByName("ListStaging")),
			connect.WithClientOptions(opts...),
		),
		moveFiles: connect.NewClient[v1.MoveFilesRequest, v1.MoveFilesResponse](
			httpClient,
			baseURL+FaniServiceMoveFilesProcedure,
			connect.WithSchema(faniServiceMethods.ByName("MoveFiles")),
			connect.WithClientOptions(opts...),
		),
		getMedia: connect.NewClient[v1.GetMediaRequest, v1.GetMediaResponse](
			httpClient,
			baseURL+FaniServiceGetMediaProcedure,
			connect.WithSchema(faniServiceMethods.ByName("GetMedia")),
			connect.WithClientOptions(opts...),
		),
	}
}

// faniServiceClient implements FaniServiceClient.
type faniServiceClient struct {
	listAlbums  *connect.Client[v1.ListAlbumsRequest, v1.ListAlbumsResponse]
	listStaging *connect.Client[v1.ListStagingRequest, v1.ListStagingResponse]
	moveFiles   *connect.Client[v1.MoveFilesRequest, v1.MoveFilesResponse]
	getMedia    *connect.Client[v1.GetMediaRequest, v1.GetMediaResponse]
}

// ListAlbums calls fani.v1.FaniService.ListAlbums.
func (c *faniServiceClient) ListAlbums(ctx context.Context, req *connect.Request[v1.ListAlbumsRequest]) (*connect.Response[v1.ListAlbumsResponse], error) {
	return c.listAlbums.CallUnary(ctx, req)
}

// ListStaging calls fani.v1.FaniService.ListStaging.
func (c *faniServiceClient) ListStaging(ctx context.Context, req *connect.Request[v1.ListStagingRequest]) (*connect.Response[v1.ListStagingResponse], error) {
	return c.listStaging.CallUnary(ctx, req)
}

// MoveFiles calls fani.v1.FaniService.MoveFiles.
func (c *faniServiceClient) MoveFiles(ctx context.Context, req *connect.Request[v1.MoveFilesRequest]) (*connect.Response[v1.MoveFilesResponse], error) {
	return c.moveFiles.CallUnary(ctx, req)
}

// GetMedia calls fani.v1.FaniService.GetMedia.
func (c *faniServiceClient) GetMedia(ctx context.Context, req *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error) {
	return c.getMedia.CallUnary(ctx, req)
}

// FaniServiceHandler is an implementation of the fani.v1.FaniService service.
type FaniServiceHandler interface {
	ListAlbums(context.Context, *connect.Request[v1.ListAlbumsRequest]) (*connect.Response[v1.ListAlbumsResponse], error)
	ListStaging(context.Context, *connect.Request[v1.ListStagingRequest]) (*connect.Response[v1.ListStagingResponse], error)
	MoveFiles(context.Context, *connect.Request[v1.MoveFilesRequest]) (*connect.Response[v1.MoveFilesResponse], error)
	GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error)
}

// NewFaniServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFaniServiceHandler(svc FaniServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	faniServiceMethods := v1.File_fani_v1_fani_proto.Services().ByName("FaniService").Methods()
	faniServiceListAlbumsHandler := connect.NewUnaryHandler(
		FaniServiceListAlbumsProcedure,
		svc.ListAlbums,
		connect.WithSchema(faniServiceMethods.ByName("ListAlbums")),
		connect.WithHandlerOptions(opts...),
	)
	faniServiceListStagingHandler := connect.NewUnaryHandler(
		FaniServiceListStagingProcedure,
		svc.ListStaging,
		connect.WithSchema(faniServiceMethods.ByName("ListStaging")),
		connect.WithHandlerOptions(opts...),
	)
	faniServiceMoveFilesHandler := connect.NewUnaryHandler(
		FaniServiceMoveFilesProcedure,
		svc.MoveFiles,
		connect.WithSchema(faniServiceMethods.ByName("MoveFiles")),
		connect.WithHandlerOptions(opts...),
	)
	faniServiceGetMediaHandler := connect.NewUnaryHandler(
		FaniServiceGetMediaProcedure,
		svc.GetMedia,
		connect.WithSchema(faniServiceMethods.ByName("GetMedia")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fani.v1.FaniService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FaniServiceListAlbumsProcedure:
			faniServiceListAlbumsHandler.ServeHTTP(w, r)
		case FaniServiceListStagingProcedure:
			faniServiceListStagingHandler.ServeHTTP(w, r)
		case FaniServiceMoveFilesProcedure:
			faniServiceMoveFilesHandler.ServeHTTP(w, r)
		case FaniServiceGetMediaProcedure:
			faniServiceGetMediaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFaniServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFaniServiceHandler struct{}

func (UnimplementedFaniServiceHandler) ListAlbums(context.Context, *connect.Request[v1.ListAlbumsRequest]) (*connect.Response[v1.ListAlbumsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fani.v1.FaniService.ListAlbums is not implemented"))
}

func (UnimplementedFaniServiceHandler) ListStaging(context.Context, *connect.Request[v1.ListStagingRequest]) (*connect.Response[v1.ListStagingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fani.v1.FaniService.ListStaging is not implemented"))
}

func (UnimplementedFaniServiceHandler) MoveFiles(context.Context, *connect.Request[v1.MoveFilesRequest]) (*connect.Response[v1.MoveFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fani.v1.FaniService.MoveFiles is not implemented"))
}

func (UnimplementedFaniServiceHandler) GetMedia(context.Context, *connect.Request[v1.GetMediaRequest]) (*connect.Response[v1.GetMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fani.v1.FaniService.GetMedia is not implemented"))
}
